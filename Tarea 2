#include "glut.h"
#include <stdlib.h>
#include <math.h>

void setPixel(int x, int y) {
	glPointSize(3.0);
	glVertex2i(x, y);
	glColor3f(0.0, 1.0, 0.0); // Color Verde
}
void lineDDA(int x0, int y0, int xEnd, int yEnd)
{
	int dx = xEnd - x0, dy = yEnd - y0, steps, k;
	float xIncrement, yIncrement, x = x0, y = y0;
	if (fabs(dx) > fabs(dy)) {
		steps = fabs(dx);
	}
	else {
		steps = fabs(dy);
		xIncrement = float(dx) / float(steps);
		yIncrement = float(dy) / float(steps);
	}
	setPixel(round(x), round(y));

	for (k = 0; k < steps; k++) {
		x += xIncrement;
		y += yIncrement;
		glColor3f(0.0, 1.0, 1.0); // Color Cian
		setPixel(round(x), round(y));
	}
}
void lineBres(int x0, int y0, int xEnd, int yEnd)
{
	int dx = fabs(xEnd - x0), dy = fabs(yEnd - y0);
	int p = 2 * dy - dx;
	int twoDy = 2 * dy, twoDyMinusDx = 2 * (dy - dx);
	int x, y;
	if (x0 > xEnd) {
		x = xEnd;
		y = yEnd;
		xEnd = x0;
	}
	else {
		x = x0;
		y = y0;
	}
	setPixel(x, y);
	while (x < xEnd) {
		x++;
		if (p < 0)
			p += twoDy;
		else {
			y++;
			p += twoDyMinusDx;
		}
		setPixel(x, y);
	}
}
void lineSegment(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 0.0, 1.0); // Color Magenta
	glBegin(GL_LINES);
	glVertex2i(110, 35);
	glVertex2i(30, 15);
	glEnd();
	// DDA
	glBegin(GL_LINES);
	lineDDA(10, 10, 110, 160);
	glEnd();
	// Bresenham
	glBegin(GL_LINES);
	lineBres(10, 50, 100, 120);
	glEnd();
	glFlush();
}

void inicializacion(void) {
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0.0, 400.0, 0.0, 300.0);
}
int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(50, 100);
	glutInitWindowSize(400, 300);
	glutCreateWindow("Plantilla Basica");
	inicializacion();
	glutDisplayFunc(lineSegment);
	glutMainLoop();
	return 0;
}
